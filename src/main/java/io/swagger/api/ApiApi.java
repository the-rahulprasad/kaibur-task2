/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ServerData;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-24T15:24:29.451528149Z[GMT]")
@Validated
public interface ApiApi{

    @Operation(summary = "", description = "use this api to fetch the server using name", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "used id not found") })
    @RequestMapping(value = "/api/v1/server/delete{server_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> apiV1ServerDeleteserverIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("server_id") String serverId);


    @Operation(summary = "", description = "use this api to fetch the server using id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "course created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ServerData.class))),
        
        @ApiResponse(responseCode = "404", description = "User ID not found") })
    @RequestMapping(value = "/api/v1/{server_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ServerData> apiV1ServerIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("server_id") String serverId);


    @Operation(summary = "", description = "use this api to fetch the server using name", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "course created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ServerData.class))),
        
        @ApiResponse(responseCode = "404", description = "User ID not found") })
    @RequestMapping(value = "/api/v1/server/{name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ServerData> apiV1ServerNameGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("name") String name);


    @Operation(summary = "", description = "Use this API to create server", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "course created successfully") })
    @RequestMapping(value = "/api/v1/server",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> apiV1ServerPut(@Parameter(in = ParameterIn.DEFAULT, description = "Structure of a server", required=true, schema=@Schema()) @Valid @RequestBody ServerData body);

}

